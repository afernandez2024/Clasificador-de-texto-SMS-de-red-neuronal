# -*- coding: utf-8 -*-
"""Clasificador de texto SMS de red neuronal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dChaMSFJ7o0NVOfVPeoiNePnJZtDRuhq
"""

# Importa las bibliotecas necesarias
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score, classification_report

# Cargar los datos desde los archivos TSV, especificando los nombres de las columnas
train_data = pd.read_csv('train-data.tsv', sep='\t', header=None, names=['label', 'message'])
valid_data = pd.read_csv('valid-data.tsv', sep='\t', header=None, names=['label', 'message'])

# Verificar el balance de clases en los datos de entrenamiento
print(train_data['label'].value_counts())

# Prepara los datos de entrenamiento
X_train = train_data['message']  # columna con los mensajes SMS
y_train = train_data['label']    # columna con las etiquetas "ham" o "spam"

# Prepara los datos de validación (opcional)
X_valid = valid_data['message']
y_valid = valid_data['label']

# Crear un pipeline con TfidfVectorizer y Logistic Regression
model = make_pipeline(TfidfVectorizer(), LogisticRegression(max_iter=1000))

# Entrenar el modelo
model.fit(X_train, y_train)

# Definir la función predict_message
def predict_message(message):
    # Hacer la predicción
    pred_proba = model.predict_proba([message])[0]  # Obtener las probabilidades
    pred_label = model.predict([message])[0]        # Obtener la etiqueta

    # Probar si la etiqueta predicha es 'ham' o 'spam' y asignar la probabilidad correspondiente
    if pred_label == 'ham':
        return [pred_proba[0], 'ham']
    else:
        return [pred_proba[1], 'spam']

# Evaluar el modelo con el conjunto de validación
y_pred = model.predict(X_valid)
print("Accuracy en validación:", accuracy_score(y_valid, y_pred))
print("Classification Report:\n", classification_report(y_valid, y_pred))

# Celda de prueba (no modificar)
def test_predictions():
  test_messages = ["how are you doing today",
                   "sale today! to stop texts call 98912460324",
                   "i dont want to go. can we try it a different day? available sat",
                   "our new mobile video service is live. just install on your phone to start watching.",
                   "you have won £1000 cash! call to claim your prize.",
                   "i'll bring it tomorrow. don't forget the milk.",
                   "wow, is your arm alright. that happened to me one time too"
                  ]

  test_answers = ["ham", "spam", "ham", "spam", "spam", "ham", "ham"]
  passed = True

  for msg, ans in zip(test_messages, test_answers):
    prediction = predict_message(msg)
    if prediction[1] != ans:
      passed = False

  if passed:
    print("You passed the challenge. Great job!")
  else:
    print("You haven't passed yet. Keep trying.")

# Ejecutar la función de prueba
test_predictions()